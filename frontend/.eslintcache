[{"/home/luckinha45/Documents/bd/trabalho_banco_de_dados/trabalho_bancos_de_dados/frontend/src/index.tsx":"1","/home/luckinha45/Documents/bd/trabalho_banco_de_dados/trabalho_bancos_de_dados/frontend/src/styles/global.ts":"2","/home/luckinha45/Documents/bd/trabalho_banco_de_dados/trabalho_bancos_de_dados/frontend/src/pages/Feed/index.tsx":"3","/home/luckinha45/Documents/bd/trabalho_banco_de_dados/trabalho_bancos_de_dados/frontend/src/pages/UserRegister/index.tsx":"4","/home/luckinha45/Documents/bd/trabalho_banco_de_dados/trabalho_bancos_de_dados/frontend/src/pages/UserLogin/styles.ts":"5","/home/luckinha45/Documents/bd/trabalho_banco_de_dados/trabalho_bancos_de_dados/frontend/src/services/api.ts":"6","/home/luckinha45/Documents/bd/trabalho_banco_de_dados/trabalho_bancos_de_dados/frontend/src/Components/CardContainer/index.tsx":"7","/home/luckinha45/Documents/bd/trabalho_banco_de_dados/trabalho_bancos_de_dados/frontend/src/Components/CardContainer/styles.ts":"8","/home/luckinha45/Documents/bd/trabalho_banco_de_dados/trabalho_bancos_de_dados/frontend/src/App.tsx":"9","/home/luckinha45/Documents/bd/trabalho_banco_de_dados/trabalho_bancos_de_dados/frontend/src/pages/Podcast/index.tsx":"10","/home/luckinha45/Documents/bd/trabalho_banco_de_dados/trabalho_bancos_de_dados/frontend/src/context/AuthContext.ts":"11","/home/luckinha45/Documents/bd/trabalho_banco_de_dados/trabalho_bancos_de_dados/frontend/src/pages/UserRegister/styles.ts":"12","/home/luckinha45/Documents/bd/trabalho_banco_de_dados/trabalho_bancos_de_dados/frontend/src/pages/PodcastRegister/styles.ts":"13","/home/luckinha45/Documents/bd/trabalho_banco_de_dados/trabalho_bancos_de_dados/frontend/src/pages/Episode/index.tsx":"14","/home/luckinha45/Documents/bd/trabalho_banco_de_dados/trabalho_bancos_de_dados/frontend/src/Components/Header/styles.ts":"15"},{"size":270,"mtime":1618509922006,"results":"16","hashOfConfig":"17"},{"size":387,"mtime":1618509922006,"results":"18","hashOfConfig":"17"},{"size":280,"mtime":1618509922006,"results":"19","hashOfConfig":"17"},{"size":3338,"mtime":1618509922006,"results":"20","hashOfConfig":"17"},{"size":1964,"mtime":1618509922006,"results":"21","hashOfConfig":"17"},{"size":114,"mtime":1618509922006,"results":"22","hashOfConfig":"17"},{"size":7763,"mtime":1618509922002,"results":"23","hashOfConfig":"17"},{"size":2392,"mtime":1618509922002,"results":"24","hashOfConfig":"17"},{"size":311,"mtime":1618509922002,"results":"25","hashOfConfig":"17"},{"size":11264,"mtime":1618509922006,"results":"26","hashOfConfig":"17"},{"size":343,"mtime":1618509922006,"results":"27","hashOfConfig":"17"},{"size":1882,"mtime":1618509922006,"results":"28","hashOfConfig":"17"},{"size":1529,"mtime":1618509922006,"results":"29","hashOfConfig":"17"},{"size":3012,"mtime":1618509922006,"results":"30","hashOfConfig":"17"},{"size":1197,"mtime":1618509922002,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"1locmky",{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"34"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/luckinha45/Documents/bd/trabalho_banco_de_dados/trabalho_bancos_de_dados/frontend/src/index.tsx",[],[],"/home/luckinha45/Documents/bd/trabalho_banco_de_dados/trabalho_bancos_de_dados/frontend/src/styles/global.ts",[],"/home/luckinha45/Documents/bd/trabalho_banco_de_dados/trabalho_bancos_de_dados/frontend/src/pages/Feed/index.tsx",[],"/home/luckinha45/Documents/bd/trabalho_banco_de_dados/trabalho_bancos_de_dados/frontend/src/pages/UserRegister/index.tsx",[],"/home/luckinha45/Documents/bd/trabalho_banco_de_dados/trabalho_bancos_de_dados/frontend/src/pages/UserLogin/styles.ts",[],"/home/luckinha45/Documents/bd/trabalho_banco_de_dados/trabalho_bancos_de_dados/frontend/src/services/api.ts",[],"/home/luckinha45/Documents/bd/trabalho_banco_de_dados/trabalho_bancos_de_dados/frontend/src/Components/CardContainer/index.tsx",[],"/home/luckinha45/Documents/bd/trabalho_banco_de_dados/trabalho_bancos_de_dados/frontend/src/Components/CardContainer/styles.ts",["64"],"/home/luckinha45/Documents/bd/trabalho_banco_de_dados/trabalho_bancos_de_dados/frontend/src/App.tsx",[],"/home/luckinha45/Documents/bd/trabalho_banco_de_dados/trabalho_bancos_de_dados/frontend/src/pages/Podcast/index.tsx",["65","66","67"],"import React, { FormEvent, useContext, useEffect, useState } from 'react'\nimport { FiRss, FiGlobe, FiMail, FiBarChart2, FiSend } from 'react-icons/fi'\nimport convert from 'xml-js'\nimport axios from 'axios'\nimport StarPicker from 'react-star-picker'\n\nimport { About, Buttons, Card, Comment, CommentCard, Container, Info, Message, PodcastCard, SendContainer, Stats, Subscribe } from './styles'\nimport api from '../../services/api'\nimport Header from '../../Components/Header'\nimport CommentImg from '../../assets/comments.png'\nimport StarsImg from '../../assets/stars.png'\nimport { useRouteMatch } from 'react-router-dom'\nimport AuthContext from '../../context/AuthContext'\nimport Episode from '../Episode'\n\ninterface Props {\n    podcastUrl: string\n    podcastId: string\n    userId: string\n}\n\ninterface Podcast {\n    name: string\n    description: string\n    imageUrl: string\n    episodes: Episode[]\n    stars?: number\n    userStars?: number\n    comments?: number\n    subscribed?: boolean\n    site?: string\n    email?: string\n    feed?: string\n}\n\ninterface Episode {\n    id: string\n    name: string\n    image?: string\n    audio?: string\n}\n\ninterface Params {\n    id: string\n}\n\nconst Podcast: React.FC<Props> = () => {\n    const [podcast, setPodcast] = useState<Podcast>()\n    const [showComment, setShowComment] = useState(false)\n    const [comments, setComments] = useState<string[]>([])\n\n    const [message, setMessage] = useState('')\n\n    const { podcastUrl, id:userId, logged } = useContext(AuthContext)\n\n    const { params } = useRouteMatch<Params>()\n    const podcastId = params.id\n\n    useEffect(() => {\n        const data = async () => {\n            const result = await axios.get(`${ podcastUrl }`, {\n                headers:{'Content-Type': 'application/x-www-form-urlencoded'}\n            })\n            const json = JSON.parse(convert.xml2json(result.data, {compact: true, spaces: 4}))\n            console.log(json)\n            if(logged) {\n                const additional = await api.get(`podcast/statistics/${podcastId}/${userId}`)\n\n                setPodcast({\n                    name: Object.values(json.rss.channel.title)[0] as string,\n                    description: Object.values(json.rss.channel.description)[0] as string,\n                    imageUrl: Array.isArray(json.rss.channel.image) ? Object.values(json.rss.channel.image[1].url)[0] as string : Object.values(json.rss.channel.image.url)[0] as string,\n                    episodes: json.rss.channel.item.map( (episode: any) => {\n                        return {\n                            id: episode.guid._text,\n                            name: Object.values(episode.title)[0],\n                            image: episode['itunes:image'] ? episode['itunes:image']._attributes.href : Array.isArray(json.rss.channel.image) ? Object.values(json.rss.channel.image[1].url)[0] as string : Object.values(json.rss.channel.image.url)[0] as string,\n                            audio: episode.enclosure._attributes.url\n                        }\n                    }),\n                    stars: additional.data.estrelas,\n                    userStars: additional.data.estrelas_do_usuario,\n                    comments: additional.data.comentarios,\n                    subscribed: additional.data.inscrito,\n                    site: additional.data.site,\n                    email: additional.data.email,\n                    feed: additional.data.feed_rss,\n                })\n\n            } else {\n                setPodcast({\n                    name: Object.values(json.rss.channel.title)[0] as string,\n                    description: Object.values(json.rss.channel.description)[0] as string,\n                    imageUrl: Array.isArray(json.rss.channel.image) ? Object.values(json.rss.channel.image[1].url)[0] as string : Object.values(json.rss.channel.image.url)[0] as string,\n                    episodes: json.rss.channel.item.map( (episode: any) => {\n                        return {\n                            id: episode.guid._text,\n                            name: Object.values(episode.title)[0],\n                            image: episode['itunes:image'] ? episode['itunes:image']._attributes.href : Array.isArray(json.rss.channel.image) ? Object.values(json.rss.channel.image[1].url)[0] as string : Object.values(json.rss.channel.image.url)[0] as string,\n                            audio: episode.enclosure._attributes.url\n                        }\n                    })\n                })\n            }\n            console.log(podcast)\n        }\n        data()\n    }, [podcastUrl, podcast?.userStars])\n\n    const handleSubscribe = async () => {\n        console.log(podcast)\n        if(podcast?.subscribed) {\n            await api.delete(`inscrever/${userId}/${podcastId}`)\n            setPodcast({\n                ...podcast,\n                subscribed: false\n            })\n        } else if(podcast?.subscribed == false) {\n            await api.post('inscrever/', {\n                usr_id: userId,\n                pod_id: podcastId,\n                classificacao: 0\n            })\n            setPodcast({\n                ...podcast,\n                subscribed: true\n            })\n        }\n    }\n\n    const handleStars = async (value: number) => {\n        if(podcast){\n            setPodcast({\n                ...podcast,\n                userStars: value\n            })\n\n            await api.put(`inscrever/${userId}/${podcastId}`, {\n                usr_id: userId,\n                pod_id: podcastId,\n                classificacao: value\n            })\n        }\n    }\n\n    const handleShowComment = async() => {\n        if(!showComment && comments.length == 0) {\n            const comms = await api.get(`comentario/${podcastId}`)\n            setComments(comms.data.comments.map( (comment:any) => comment.comentario ))\n        }\n        setShowComment(!showComment)\n    }\n\n    const handleSubmit = async (event: FormEvent<HTMLFormElement>) => {\n        event.preventDefault()\n        await api.post('comentario/', {\n            pod_id: podcastId,\n            usr_id: userId,\n            comentario: message\n        })\n\n        const newCom = comments\n        newCom.push(message)\n        setComments(newCom)\n\n        setMessage('')\n        if(podcast) {\n            setPodcast({\n                ...podcast,\n                comments: comments.length\n            })\n        }\n    }\n\n    return (\n        <>\n            <Header/>\n            <Container>\n                <Card>\n                    <Info>\n                        <PodcastCard about={ podcast?.imageUrl }/>\n                        <About>\n                            <h1>{ podcast?.name }</h1>\n                            <p>{ podcast?.description }</p>\n                            {\n                                logged ? (\n                                    <>\n                                        <Stats>\n                                            <img src={StarsImg} />\n                                            <h1>{ podcast?.stars ? podcast?.stars : 0 }</h1>\n                                            <img style={{cursor: 'pointer'}} onClick={handleShowComment} src={CommentImg} />\n                                            <h1 style={{cursor: 'pointer'}} onClick={handleShowComment} >{`${ podcast?.comments ? podcast?.comments : 0 } comentários`}</h1>\n                                        </Stats>\n                                        <Buttons>\n                                            <a href={podcast?.site}><FiGlobe color='#fff' size='1.9vw' /></a>\n                                            {\n                                                podcast?.email && <a href={`mailto:${podcast?.email}`}><FiMail color='#fff' size='1.9vw' /></a>\n                                            }\n                                            <a href={podcast?.feed}><FiRss color='#fff' size='1.9vw' /></a>\n                                            <a href='/'><FiBarChart2 color='#fff' size='1.9vw' /></a>\n                                            {\n                                                logged && <StarPicker onChange={(value) => handleStars(value ? value : 0)} value={podcast?.userStars ? podcast.userStars : 0} />\n                                            }\n                                        </Buttons>\n                                    </>\n                                ) : (\n                                    <>\n                                        <div></div>\n                                        <div></div>\n                                        <div></div>\n                                        <div></div>\n                                        <div></div>\n                                    </>\n                                )\n                            }\n                        </About>\n                        {\n                            logged && (\n                                <Subscribe onClick={handleSubscribe}>\n                                    { podcast?.subscribed ? 'Inscrito' : 'Inscrever' }\n                                </Subscribe>\n                            )\n                        }\n                    </Info>\n                    {\n                        showComment ? (\n                            <CommentCard>\n                                <div>\n                                    {\n                                        comments.map(\n                                            comment => {\n                                                return (\n                                                    <Comment key={comment}>\n                                                        <p>{ comment }</p>\n                                                    </Comment>\n                                                )\n                                            }\n                                        )\n                                    }\n                                </div>\n                                <SendContainer onSubmit={(event) => handleSubmit(event)}>\n                                    <Message placeholder='Digite sua mensagem' value={message} onChange={(event) => setMessage(event.target.value)} />\n                                    <button type='submit'>\n                                        <FiSend color='#fff' size='1.9vw' />\n                                    </button>\n                                </SendContainer>\n                            </CommentCard>\n                        ) : (<></>)\n                    }\n                    {\n                        podcast?.episodes.map( episode => {\n                            return (\n                                <Episode\n                                    key={episode.id}\n                                    id={episode.id}\n                                    image={episode.image ? episode.image : ''}\n                                    name={episode.name}\n                                    podcastId={podcastId}\n                                    audioUrl={episode.audio ? episode.audio : ''}\n                                />\n                            )\n                        })\n                    }\n                </Card>\n            </Container>\n        </>\n    )\n}\n\nexport default Podcast\n","/home/luckinha45/Documents/bd/trabalho_banco_de_dados/trabalho_bancos_de_dados/frontend/src/context/AuthContext.ts",["68"],"/home/luckinha45/Documents/bd/trabalho_banco_de_dados/trabalho_bancos_de_dados/frontend/src/pages/UserRegister/styles.ts",[],"/home/luckinha45/Documents/bd/trabalho_banco_de_dados/trabalho_bancos_de_dados/frontend/src/pages/PodcastRegister/styles.ts",[],"/home/luckinha45/Documents/bd/trabalho_banco_de_dados/trabalho_bancos_de_dados/frontend/src/pages/Episode/index.tsx",["69","70","71"],"/home/luckinha45/Documents/bd/trabalho_banco_de_dados/trabalho_bancos_de_dados/frontend/src/Components/Header/styles.ts",[],{"ruleId":"72","severity":1,"message":"73","line":2,"column":10,"nodeType":"74","messageId":"75","endLine":2,"endColumn":15},{"ruleId":"76","severity":1,"message":"77","line":73,"column":68,"nodeType":"78","messageId":"79","endLine":73,"endColumn":71,"suggestions":"80"},{"ruleId":"76","severity":1,"message":"77","line":95,"column":68,"nodeType":"78","messageId":"79","endLine":95,"endColumn":71,"suggestions":"81"},{"ruleId":"76","severity":1,"message":"77","line":149,"column":59,"nodeType":"78","messageId":"79","endLine":149,"endColumn":62,"suggestions":"82"},{"ruleId":"72","severity":1,"message":"83","line":1,"column":8,"nodeType":"74","messageId":"75","endLine":1,"endColumn":13},{"ruleId":"72","severity":1,"message":"84","line":7,"column":8,"nodeType":"74","messageId":"75","endLine":7,"endColumn":11},{"ruleId":"72","severity":1,"message":"85","line":42,"column":40,"nodeType":"74","messageId":"75","endLine":42,"endColumn":49},{"ruleId":"72","severity":1,"message":"86","line":45,"column":24,"nodeType":"74","messageId":"75","endLine":45,"endColumn":30},"@typescript-eslint/no-unused-vars","'shade' is defined but never used.","Identifier","unusedVar","@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["87","88"],["89","90"],["91","92"],"'React' is defined but never used.","'api' is defined but never used.","'podcastId' is defined but never used.","'userId' is assigned a value but never used.",{"messageId":"93","fix":"94","desc":"95"},{"messageId":"96","fix":"97","desc":"98"},{"messageId":"93","fix":"99","desc":"95"},{"messageId":"96","fix":"100","desc":"98"},{"messageId":"93","fix":"101","desc":"95"},{"messageId":"96","fix":"102","desc":"98"},"suggestUnknown",{"range":"103","text":"104"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"103","text":"105"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"106","text":"104"},{"range":"106","text":"105"},{"range":"107","text":"104"},{"range":"107","text":"105"},[2496,2499],"unknown","never",[3917,3920],[5781,5784]]