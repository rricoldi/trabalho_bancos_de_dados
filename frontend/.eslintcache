[{"/home/renan/college/trabalho_bancos_de_dados/frontend/src/pages/Podcast/index.tsx":"1","/home/renan/college/trabalho_bancos_de_dados/frontend/src/index.tsx":"2","/home/renan/college/trabalho_bancos_de_dados/frontend/src/styles/global.ts":"3","/home/renan/college/trabalho_bancos_de_dados/frontend/src/routes/index.tsx":"4","/home/renan/college/trabalho_bancos_de_dados/frontend/src/pages/Feed/index.tsx":"5","/home/renan/college/trabalho_bancos_de_dados/frontend/src/pages/UserRegister/index.tsx":"6","/home/renan/college/trabalho_bancos_de_dados/frontend/src/Components/CardContainer/styles.ts":"7","/home/renan/college/trabalho_bancos_de_dados/frontend/src/Components/CardContainer/index.tsx":"8","/home/renan/college/trabalho_bancos_de_dados/frontend/src/pages/Podcast/styles.ts":"9","/home/renan/college/trabalho_bancos_de_dados/frontend/src/pages/PodcastRegister/index.tsx":"10","/home/renan/college/trabalho_bancos_de_dados/frontend/src/Components/Header/styles.ts":"11","/home/renan/college/trabalho_bancos_de_dados/frontend/src/Components/Header/index.tsx":"12","/home/renan/college/trabalho_bancos_de_dados/frontend/src/pages/UserRegister/styles.ts":"13","/home/renan/college/trabalho_bancos_de_dados/frontend/src/pages/PodcastRegister/styles.ts":"14","/home/renan/college/trabalho_bancos_de_dados/frontend/src/context/AuthContext.ts":"15","/home/renan/college/trabalho_bancos_de_dados/frontend/src/App.tsx":"16","/home/renan/college/trabalho_bancos_de_dados/frontend/src/pages/Episode/index.tsx":"17","/home/renan/college/trabalho_bancos_de_dados/frontend/src/pages/Episode/styles.ts":"18","/home/renan/college/trabalho_bancos_de_dados/frontend/src/reportWebVitals.ts":"19","/home/renan/college/trabalho_bancos_de_dados/frontend/src/services/api.ts":"20"},{"size":12415,"mtime":1607985735345,"results":"21","hashOfConfig":"22"},{"size":270,"mtime":1607449015554,"results":"23","hashOfConfig":"22"},{"size":387,"mtime":1607689467860,"results":"24","hashOfConfig":"22"},{"size":1122,"mtime":1607987491324,"results":"25","hashOfConfig":"22"},{"size":280,"mtime":1607890264478,"results":"26","hashOfConfig":"22"},{"size":3338,"mtime":1607910600859,"results":"27","hashOfConfig":"22"},{"size":2392,"mtime":1607897477847,"results":"28","hashOfConfig":"22"},{"size":7763,"mtime":1607960295005,"results":"29","hashOfConfig":"22"},{"size":4297,"mtime":1607978692479,"results":"30","hashOfConfig":"22"},{"size":2317,"mtime":1607902024993,"results":"31","hashOfConfig":"22"},{"size":1197,"mtime":1607898051363,"results":"32","hashOfConfig":"22"},{"size":1875,"mtime":1607908994022,"results":"33","hashOfConfig":"22"},{"size":1882,"mtime":1607882899041,"results":"34","hashOfConfig":"22"},{"size":1529,"mtime":1607548731958,"results":"35","hashOfConfig":"22"},{"size":343,"mtime":1607904910450,"results":"36","hashOfConfig":"22"},{"size":311,"mtime":1607449043535,"results":"37","hashOfConfig":"22"},{"size":3096,"mtime":1607983846829,"results":"38","hashOfConfig":"22"},{"size":1478,"mtime":1607983677915,"results":"39","hashOfConfig":"22"},{"size":458,"mtime":1607449015562,"results":"40","hashOfConfig":"22"},{"size":114,"mtime":1607862462769,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44"},"cis5zc",{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"63"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/renan/college/trabalho_bancos_de_dados/frontend/src/pages/Podcast/index.tsx",["87","88","89"],"import React, { FormEvent, useContext, useEffect, useState } from 'react'\nimport { FiRss, FiGlobe, FiMail, FiBarChart2, FiSend } from 'react-icons/fi'\nimport convert from 'xml-js'\nimport axios from 'axios'\nimport StarPicker from 'react-star-picker'\n\nimport { About, Buttons, Card, Comment, CommentCard, Container, Info, Message, PodcastCard, SendContainer, Stats, Subscribe } from './styles'\nimport api from '../../services/api'\nimport Header from '../../Components/Header'\nimport CommentImg from '../../assets/comments.png'\nimport StarsImg from '../../assets/stars.png'\nimport { useRouteMatch } from 'react-router-dom'\nimport AuthContext from '../../context/AuthContext'\nimport Episode from '../Episode'\n\ninterface Props {\n    podcastUrl: string\n    podcastId: string\n    userId: string\n}\n\ninterface Podcast {\n    name: string\n    description: string\n    imageUrl: string\n    episodes: Episode[]\n    stars?: number\n    userStars?: number\n    comments?: number\n    subscribed?: boolean\n    site?: string\n    email?: string\n    feed?: string\n}\n\ninterface Episode {\n    id: string\n    name: string\n    image?: string\n    likes?: number\n    liked?: boolean\n    audio?: string\n}\n\ninterface Params {\n    id: string\n}\n\nconst Podcast: React.FC<Props> = () => {\n    const [podcast, setPodcast] = useState<Podcast>()\n    const [showComment, setShowComment] = useState(false)\n    const [comments, setComments] = useState<string[]>([])\n\n    const [message, setMessage] = useState('')\n\n    const { podcastUrl, id:userId, logged } = useContext(AuthContext)\n\n    const { params } = useRouteMatch<Params>()\n    const podcastId = params.id\n\n    useEffect(() => {\n        const data = async () => {\n            const result = await axios.get(`${ podcastUrl }`, {\n                headers:{'Content-Type': 'application/x-www-form-urlencoded'}\n            })\n            const json = JSON.parse(convert.xml2json(result.data, {compact: true, spaces: 4}))\n            console.log(json)\n            if(logged) {\n                const additional = await api.get(`podcast/statistics/${podcastId}/${userId}`)\n\n                setPodcast({\n                    name: Object.values(json.rss.channel.title)[0] as string,\n                    description: Object.values(json.rss.channel.description)[0] as string,\n                    imageUrl: Array.isArray(json.rss.channel.image) ? Object.values(json.rss.channel.image[1].url)[0] as string : Object.values(json.rss.channel.image.url)[0] as string,\n                    episodes: json.rss.channel.item.map( (episode: any) => {\n                        for(let i = 0; i < additional.data.episodios.length; i++) {\n                            if(additional.data.episodios[i].id == episode.guid._text) {\n                                return {\n                                    id: episode.guid._text,\n                                    name: Object.values(episode.title)[0],\n                                    image: episode['itunes:image'] ? episode['itunes:image']._attributes.href : Array.isArray(json.rss.channel.image) ? Object.values(json.rss.channel.image[1].url)[0] as string : Object.values(json.rss.channel.image.url)[0] as string,\n                                    likes: additional.data.episodios[i].curtidas,\n                                    liked: additional.data.episodios[i].usuario_curtiu,\n                                    audio: episode.enclosure._attributes.url\n                                }\n                            }\n                        }\n                        return {\n                            id: episode.guid._text,\n                            name: Object.values(episode.title)[0],\n                            image: episode['itunes:image'] ? episode['itunes:image']._attributes.href : Array.isArray(json.rss.channel.image) ? Object.values(json.rss.channel.image[1].url)[0] as string : Object.values(json.rss.channel.image.url)[0] as string,\n                            audio: episode.enclosure._attributes.url\n                        }\n                    }),\n                    stars: additional.data.estrelas,\n                    userStars: additional.data.estrelas_do_usuario,\n                    comments: additional.data.comentarios,\n                    subscribed: additional.data.inscrito,\n                    site: additional.data.site,\n                    email: additional.data.email,\n                    feed: additional.data.feed_rss,\n                })\n\n            } else {\n                setPodcast({\n                    name: Object.values(json.rss.channel.title)[0] as string,\n                    description: Object.values(json.rss.channel.description)[0] as string,\n                    imageUrl: Array.isArray(json.rss.channel.image) ? Object.values(json.rss.channel.image[1].url)[0] as string : Object.values(json.rss.channel.image.url)[0] as string,\n                    episodes: json.rss.channel.item.map( (episode: any) => {\n                        return {\n                            id: episode.guid._text,\n                            name: Object.values(episode.title)[0],\n                            image: episode['itunes:image'] ? episode['itunes:image']._attributes.href : Array.isArray(json.rss.channel.image) ? Object.values(json.rss.channel.image[1].url)[0] as string : Object.values(json.rss.channel.image.url)[0] as string,\n                            audio: episode.enclosure._attributes.url\n                        }\n                    })\n                })\n            }\n            console.log(podcast)\n        }\n        data()\n    }, [podcastUrl, podcast?.userStars])\n\n    const handleSubscribe = async () => {\n        console.log(podcast)\n        if(podcast?.subscribed) {\n            await api.delete(`inscrever/${userId}/${podcastId}`)\n            setPodcast({\n                ...podcast,\n                subscribed: false\n            })\n        } else if(podcast?.subscribed == false) {\n            await api.post('inscrever/', {\n                usr_id: userId,\n                pod_id: podcastId,\n                classificacao: 0\n            })\n            setPodcast({\n                ...podcast,\n                subscribed: true\n            })\n        }\n    }\n\n    const handleStars = async (value: number) => {\n        if(podcast){\n            setPodcast({\n                ...podcast,\n                userStars: value\n            })\n\n            await api.put(`inscrever/${userId}/${podcastId}`, {\n                usr_id: userId,\n                pod_id: podcastId,\n                classificacao: value\n            })\n        }\n    }\n\n    const handleShowComment = async() => {\n        if(!showComment && comments.length == 0) {\n            const comms = await api.get(`comentario/${podcastId}`)\n            setComments(comms.data.comments.map( (comment:any) => comment.comentario ))\n        }\n        setShowComment(!showComment)\n    }\n\n    const handleSubmit = async (event: FormEvent<HTMLFormElement>) => {\n        event.preventDefault()\n        await api.post('comentario/', {\n            pod_id: podcastId,\n            usr_id: userId,\n            comentario: message\n        })\n\n        const newCom = comments\n        newCom.push(message)\n        setComments(newCom)\n\n        setMessage('')\n        if(podcast) {\n            setPodcast({\n                ...podcast,\n                comments: comments.length\n            })\n        }\n    }\n\n    return (\n        <>\n            <Header/>\n            <Container>\n                <Card>\n                    <Info>\n                        <PodcastCard about={ podcast?.imageUrl }/>\n                        <About>\n                            <h1>{ podcast?.name }</h1>\n                            <p>{ podcast?.description }</p>\n                            {\n                                logged ? (\n                                    <>\n                                        <Stats>\n                                            <img src={StarsImg} />\n                                            <h1>{ podcast?.stars ? podcast?.stars : 0 }</h1>\n                                            <img style={{cursor: 'pointer'}} onClick={handleShowComment} src={CommentImg} />\n                                            <h1 style={{cursor: 'pointer'}} onClick={handleShowComment} >{`${ podcast?.comments ? podcast?.comments : 0 } comentários`}</h1>\n                                        </Stats>\n                                        <Buttons>\n                                            <a href={podcast?.site}><FiGlobe color='#fff' size='1.9vw' /></a>\n                                            {\n                                                podcast?.email && <a href={`mailto:${podcast?.email}`}><FiMail color='#fff' size='1.9vw' /></a>\n                                            }\n                                            <a href={podcast?.feed}><FiRss color='#fff' size='1.9vw' /></a>\n                                            <a href='/'><FiBarChart2 color='#fff' size='1.9vw' /></a>\n                                            {\n                                                logged && <StarPicker onChange={(value) => handleStars(value ? value : 0)} value={podcast?.userStars ? podcast.userStars : 0} />\n                                            }\n                                        </Buttons>\n                                    </>\n                                ) : (\n                                    <>\n                                        <div></div>\n                                        <div></div>\n                                        <div></div>\n                                        <div></div>\n                                        <div></div>\n                                    </>\n                                )\n                            }\n                        </About>\n                        {\n                            logged && (\n                                <Subscribe onClick={handleSubscribe}>\n                                    { podcast?.subscribed ? 'Inscrito' : 'Inscrever' }\n                                </Subscribe>\n                            )\n                        }\n                    </Info>\n                    {\n                        showComment ? (\n                            <CommentCard>\n                                <div>\n                                    {\n                                        comments.map(\n                                            comment => {\n                                                return (\n                                                    <Comment key={comment}>\n                                                        <p>{ comment }</p>\n                                                    </Comment>\n                                                )\n                                            }\n                                        )\n                                    }\n                                </div>\n                                <SendContainer onSubmit={(event) => handleSubmit(event)}>\n                                    <Message placeholder='Digite sua mensagem' value={message} onChange={(event) => setMessage(event.target.value)} />\n                                    <button type='submit'>\n                                        <FiSend color='#fff' size='1.9vw' />\n                                    </button>\n                                </SendContainer>\n                            </CommentCard>\n                        ) : (<></>)\n                    }\n                    {\n                        podcast?.episodes.map( episode => {\n                            return (\n                                <Episode\n                                    key={episode.id}\n                                    id={episode.id}\n                                    image={episode.image ? episode.image : ''}\n                                    likd={episode.liked ? episode.liked : false}\n                                    likes={episode.likes ? episode.likes : 0}\n                                    name={episode.name}\n                                    podcastId={podcastId}\n                                    audioUrl={episode.audio ? episode.audio : ''}\n                                />\n                            )\n                        })\n                    }\n                </Card>\n            </Container>\n        </>\n    )\n}\n\nexport default Podcast\n","/home/renan/college/trabalho_bancos_de_dados/frontend/src/index.tsx",[],[],"/home/renan/college/trabalho_bancos_de_dados/frontend/src/styles/global.ts",[],"/home/renan/college/trabalho_bancos_de_dados/frontend/src/routes/index.tsx",[],"/home/renan/college/trabalho_bancos_de_dados/frontend/src/pages/Feed/index.tsx",[],"/home/renan/college/trabalho_bancos_de_dados/frontend/src/pages/UserRegister/index.tsx",[],"/home/renan/college/trabalho_bancos_de_dados/frontend/src/Components/CardContainer/styles.ts",["90"],"/home/renan/college/trabalho_bancos_de_dados/frontend/src/Components/CardContainer/index.tsx",[],"/home/renan/college/trabalho_bancos_de_dados/frontend/src/pages/Podcast/styles.ts",["91"],"import { shade } from 'polished'\nimport styled from 'styled-components'\n\nexport const Container = styled.div`\n    width: 100vw;\n    display: flex;\n    justify-content: center;\n`\n\nexport const Card = styled.div`\n    flex: 1;\n    max-width: 90vw;\n    background: #212325;\n    border-radius: 20px;\n\n    padding: 50px 35px;\n    margin-bottom: 8vh;\n`\n\nexport const Info = styled.div`\n    display: flex;\n    width: 100%;\n    margin: 0 0 8vh 0;\n`\n\nexport const PodcastCard = styled.div`\n    min-width: 20vw;\n    min-height: 20vw;\n\n    background-image: url(${ props => props.about }), linear-gradient(270deg, #56525a 0%, rgba(25, 25, 26, 0) 100%);\n    background-position: center;\n    background-size: cover;\n    background-repeat: no-repeat;\n\n    backdrop-filter: blur(42px);\n    border-radius: 40px;\n    border: 5px solid #161719;\n\n`\n\nexport const About = styled.div`\n    display: flex;\n    flex-direction: column;\n    margin-left: 3vw;\n    justify-content: space-between;\n    min-width: 50%;\n    max-width: 53%;\n\n    color: #fff;\n\n    font-family: 'DM Sans', sans-serif;\n\n    padding: 1vh 0;\n\n    h1 {\n        font-size: 3.5vw;\n        font-weight: bold;\n    }\n\n    p {\n        margin-left: 10px;\n        font-size: 1.06vw;\n        max-width: 70%;\n    }\n`\n\nexport const Stats = styled.div`\n    display: flex;\n    max-width: 70%;\n\n    margin-left: 15px;\n\n    img {\n        margin-right: 1.5vw;\n        width: 2vw;\n        height: 2vw;\n\n        background-position: center;\n        background-size: cover;\n        background-repeat: no-repeat;\n    }\n\n    h1 {\n        margin-right: 3vw;\n        font-family: 'DM Sans', sans-serif;\n        color: #fff;\n        font-size: 1.7vw;\n        font-weight: bold;\n    }\n`\n\nexport const Buttons = styled.div`\n    display: flex;\n    justify-content: space-between;\n    max-width: 26vw;\n\n    margin-left: 15px;\n`\n\nexport const Subscribe = styled.button`\n    width: 22vw;\n    max-width: 22vw;\n    min-width: 18vw;\n    height: 6.8vh;\n\n    background: linear-gradient(9.28deg, #1C1C1C 32.27%, #2E2E2E 68.86%);\n    backdrop-filter: blur(42px);\n\n    border-radius: 17px;\n    border: 3px solid #474949;\n\n    color: #fff;\n    font: 1.7vw 'DM Sans', sans-serif;\n        font-weight: bold;\n\n    transition: background-color 0.2s;\n\n    &:hover {\n        background: linear-gradient(9.28deg, #000000 32.27%, #171717 68.86%);\n    }\n`\n\nexport const CommentCard = styled.div`\n    flex: 1;\n    display: flex;\n    flex-direction: column;\n    margin: 0 auto 40px auto;\n    max-width: 96%;\n    max-height: 60vh;\n\n    padding: 30px;\n    border-radius: 20px;\n    justify-content: space-between;\n\n    div {\n        overflow-y: scroll;\n        overflow-x: visible;\n        ::-webkit-scrollbar {\n            width: 10px;\n            border-radius: 20px;\n        }\n\n        /* Track */\n        ::-webkit-scrollbar-track {\n            background: #292B2D;\n            border-radius: 20px;\n        }\n\n        /* Handle */\n        ::-webkit-scrollbar-thumb {\n            background: #161719;\n            border-radius: 20px;\n        }\n\n        /* Handle on hover */\n        ::-webkit-scrollbar-thumb:hover {\n            background: #212325;\n            border-radius: 20px;\n        }\n    }\n\n    background: #292B2D;\n`\nexport const Comment = styled.div`\n    display: flex;\n    justify-content: flex-start;\n    align-items: center;\n    margin: 0 auto 40px auto;\n    width: 96%;\n\n    padding: 30px;\n    border-radius: 20px;\n\n    background: #161719;\n\n    p {\n        font-family: 'DM Sans', sans-serif;\n        color: #fff;\n        font-size: 1.4vw;\n    }\n`\n\nexport const SendContainer = styled.form`\n    flex: 1;\n    width: 96%;\n    display: flex;\n    justify-content: space-between;\n    margin: 20px auto 0 auto;\n\n    button {\n        padding: 0 0 0 20px;\n        border-radius: 50%;\n        width: 1.9vw;\n        height: 1.9vw;\n        border: none; /* Remove borders */\n        background: #292B2D;\n        transform: rotate(44deg);\n    }\n\n`\n\nexport const Message = styled.input`\n    display: flex;\n    justify-content: flex-start;\n    align-items: center;\n    width: 100%;\n    max-height: 5vh;\n\n    padding: 30px;\n    border-radius: 20px;\n\n    border: 0;\n\n    font: 1.06vw 'DM Sans', sans-serif;\n    background: #161719;\n\n    color: #fff;\n\n    &::placeholder {\n        color: #fff;\n    }\n`\n",[],"/home/renan/college/trabalho_bancos_de_dados/frontend/src/pages/PodcastRegister/index.tsx",[],"/home/renan/college/trabalho_bancos_de_dados/frontend/src/Components/Header/styles.ts",[],"/home/renan/college/trabalho_bancos_de_dados/frontend/src/Components/Header/index.tsx",[],"/home/renan/college/trabalho_bancos_de_dados/frontend/src/pages/UserRegister/styles.ts",[],"/home/renan/college/trabalho_bancos_de_dados/frontend/src/pages/PodcastRegister/styles.ts",[],"/home/renan/college/trabalho_bancos_de_dados/frontend/src/context/AuthContext.ts",["92"],"/home/renan/college/trabalho_bancos_de_dados/frontend/src/App.tsx",[],[],"/home/renan/college/trabalho_bancos_de_dados/frontend/src/pages/Episode/index.tsx",[],"/home/renan/college/trabalho_bancos_de_dados/frontend/src/pages/Episode/styles.ts",[],"/home/renan/college/trabalho_bancos_de_dados/frontend/src/reportWebVitals.ts",["93"],"/home/renan/college/trabalho_bancos_de_dados/frontend/src/services/api.ts",[],{"ruleId":"94","severity":1,"message":"95","line":75,"column":68,"nodeType":"96","messageId":"97","endLine":75,"endColumn":71,"suggestions":"98"},{"ruleId":"94","severity":1,"message":"95","line":109,"column":68,"nodeType":"96","messageId":"97","endLine":109,"endColumn":71,"suggestions":"99"},{"ruleId":"94","severity":1,"message":"95","line":163,"column":59,"nodeType":"96","messageId":"97","endLine":163,"endColumn":62,"suggestions":"100"},{"ruleId":"101","severity":1,"message":"102","line":2,"column":10,"nodeType":"103","messageId":"104","endLine":2,"endColumn":15},{"ruleId":"101","severity":1,"message":"102","line":1,"column":10,"nodeType":"103","messageId":"104","endLine":1,"endColumn":15},{"ruleId":"101","severity":1,"message":"105","line":1,"column":8,"nodeType":"103","messageId":"104","endLine":1,"endColumn":13},{"ruleId":"106","severity":1,"message":"107","line":3,"column":25,"nodeType":"108","messageId":"109","endLine":3,"endColumn":57},"@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["110","111"],["112","113"],["114","115"],"@typescript-eslint/no-unused-vars","'shade' is defined but never used.","Identifier","unusedVar","'React' is defined but never used.","@typescript-eslint/explicit-module-boundary-types","Missing return type on function.","ArrowFunctionExpression","missingReturnType",{"messageId":"116","fix":"117","desc":"118"},{"messageId":"119","fix":"120","desc":"121"},{"messageId":"116","fix":"122","desc":"118"},{"messageId":"119","fix":"123","desc":"121"},{"messageId":"116","fix":"124","desc":"118"},{"messageId":"119","fix":"125","desc":"121"},"suggestUnknown",{"range":"126","text":"127"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"126","text":"128"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"129","text":"127"},{"range":"129","text":"128"},{"range":"130","text":"127"},{"range":"130","text":"128"},[2535,2538],"unknown","never",[4909,4912],[6773,6776]]